// This buildscript{} block configures the code driving the build
buildscript {
   /**
    * The nested repositories{} block declares that this build uses the
    * jcenter repository.
    */
    repositories {
        jcenter()
        google()
    }

   /**
    * This block declares a dependency on the 3.2.1 version
    * of the Gradle plugin for the buildscript.
    */
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.0'
        classpath 'de.undercouch:gradle-download-task:3.4.3'
    }
}

/**
 * This line applies the com.android.application plugin. Note that you should
 * only apply the com.android.application plugin. Applying the Java plugin as
 * well will result in a build error.
 */
apply plugin: 'com.android.application'
apply plugin: 'de.undercouch.download'

/**
 * This dependencies block includes any dependencies for the project itself. The
 * following line includes all the JAR files in the libs directory.
 */
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:support-v13:+'
    implementation 'org.jsoup:jsoup:1.11.3'
    implementation 'com.android.support:design:+'
}

/**
 * The android{} block configures all of the parameters for the Android build.
 * You must provide a value for at least the compilation target.
 */
android {
    compileSdkVersion 28

    /**
    * This nested sourceSets block points the source code directories to the
    * existing folders in the project, instead of using the default new
    * organization.
    */

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 26
    }
    flavorDimensions "version"
    productFlavors {
        amiko {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".de"
            versionNameSuffix "-de"
        }
        comed {
            dimension "version"
            applicationIdSuffix ".fr"
            versionNameSuffix "-fr"
        }
    }

    def amikoAssetDir = new File(projectDir, 'src/amiko/assets')
    task downloadAmikoDB(type: Download) {
        src "http://pillbox.oddb.org/amiko_db_full_idx_de.zip"
        dest new File(buildDir, 'amiko_db_full_idx_de.zip')
        overwrite false
        onlyIfModified true
    }
    task unzipAmikoDB(dependsOn: downloadAmikoDB, type: Copy) {
        from zipTree(downloadAmikoDB.dest)
        into amikoAssetDir
    }
    task downloadAmikoInteractions(type: Download) {
        src "http://pillbox.oddb.org/drug_interactions_csv_de.zip"
        dest new File(buildDir, 'drug_interactions_csv_de.zip')
        overwrite false
        onlyIfModified true
    }
    task unzipAmikoInteractions(dependsOn: downloadAmikoInteractions, type: Copy) {
        from zipTree(downloadAmikoInteractions.dest)
        into amikoAssetDir
    }
    task downloadAmikoReport(type: Download) {
        src "http://pillbox.oddb.org/amiko_report_de.html"
        dest amikoAssetDir
    }
    def comedAssetDir = new File(projectDir, 'src/comed/assets')
    task downloadComedDB(type: Download) {
        src "http://pillbox.oddb.org/amiko_db_full_idx_fr.zip"
        dest new File(buildDir, 'amiko_db_full_idx_fr.zip')
        overwrite false
        onlyIfModified true
    }
    task unzipComedDB(dependsOn: downloadComedDB, type: Copy) {
        from zipTree(downloadComedDB.dest)
        into comedAssetDir
    }
    task downloadComedInteractions(type: Download) {
        src "http://pillbox.oddb.org/drug_interactions_csv_fr.zip"
        dest new File(buildDir, 'drug_interactions_csv_fr.zip')
        overwrite false
        onlyIfModified true
    }
    task unzipComedInteractions(dependsOn: downloadComedInteractions, type: Copy) {
        from zipTree(downloadComedInteractions.dest)
        into comedAssetDir
    }
    task downloadComedReport(type: Download) {
        src "http://pillbox.oddb.org/amiko_report_fr.html"
        dest comedAssetDir
    }

    tasks.whenTaskAdded { task ->
        if (task.name == "generateAmikoDebugResources" || task.name == "generateAmikoReleaseResources") {
            task.dependsOn unzipAmikoDB
            task.dependsOn downloadAmikoReport
            task.dependsOn unzipAmikoInteractions
        } else if (task.name == "generateComedDebugResources" || task.name == "generateComedReleaseResources") {
            task.dependsOn unzipComedDB
            task.dependsOn downloadComedReport
            task.dependsOn unzipComedInteractions
        }
    }
}

repositories {
    google()
    jcenter()
}

android {

    signingConfigs {
        release
    }

    buildTypes {
            release {
                signingConfig signingConfigs.release
            }
    }
}

if (!project.hasProperty('isTest')) {
  def Properties props = new Properties()
  def propFile = new File('signing.properties')
  if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props!=null &&
      props.containsKey('STORE_FILE') &&
      props.containsKey('STORE_PASSWORD') &&
      props.containsKey('KEY_ALIAS') &&
      props.containsKey('KEY_PASSWORD')) {
      android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
      android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
      android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
      android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
      println 'signing.properties found but some entries are missing'
      android.buildTypes.release.signingConfig = null
    }
  } else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
  }
}
